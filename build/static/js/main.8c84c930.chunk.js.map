{"version":3,"sources":["components/CreateNote/CreateNote.js","components/Footer/Footer.js","components/Header/Header.js","components/Note/Note.js","App.js","serviceWorker.js","index.js"],"names":["CreateNote","props","useState","isExpanded","setIsExpanded","title","content","note","setNote","handleChange","event","target","name","value","prevNote","console","log","className","placeholder","type","onChange","onClick","rows","Zoom","in","Fab","preventDefault","addNote","Footer","year","Date","getFullYear","Header","Note","deleteNote","id","App","notes","setNotes","prevNotes","filter","noteItem","index","newNote","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2YAuDeA,G,MAjDW,SAACC,GAAW,IAAD,EACEC,oBAAS,GADX,mBAC1BC,EAD0B,KACfC,EADe,OAGVF,mBAAS,CAC5BG,MAAM,GACNC,QAAQ,KALqB,mBAG1BC,EAH0B,KAGrBC,EAHqB,KAW3BC,EAAe,SAACC,GAAW,IAAD,EACLA,EAAMC,OAArBC,EADoB,EACpBA,KAAKC,EADe,EACfA,MACbL,GAAQ,SAACM,GACL,OAAO,2BACAA,GADP,kBAEKF,EAAOC,QAIpBE,QAAQC,IAAIT,GAYZ,OACI,6BACI,0BAAMU,UAAU,eACXd,GACD,2BAAOS,KAAK,QAAQM,YAAY,QAAQC,KAAK,OAAOC,SAAUX,EAC9DI,MAAON,EAAKF,QACZ,8BAAUO,KAAK,UAAUM,YAAY,iBAAiBG,QA/BnD,WACXjB,GAAc,IA8BiEgB,SAAUX,EACjFa,KAAMnB,EAAa,EAAI,EAAGU,MAAON,EAAKD,UACtC,kBAACiB,EAAA,EAAD,CAAMC,GAAIrB,GACN,kBAACsB,EAAA,EAAD,CAAKJ,QAnBH,SAACX,GACfA,EAAMgB,iBACNzB,EAAM0B,QAAQpB,GACdC,EAAQ,CACJH,MAAM,GACNC,QAAQ,KAEZF,GAAc,KAaE,kBAAC,IAAD,YCpCTwB,G,MATO,WAClB,IACMC,GADO,IAAIC,MACCC,cAClB,OACI,gCACI,6CAAqBF,M,iBCMlBG,G,MAVO,WAClB,OACI,gCACI,4BACI,kBAAC,IAAD,MADJ,kB,yBCcGC,EAjBF,SAAChC,GAOV,OACI,yBAAKgB,UAAU,QACX,4BAAKhB,EAAMI,OACX,2BAAIJ,EAAMK,SACV,4BAAQe,QATI,WAChBpB,EAAMiC,WAAWjC,EAAMkC,MASf,kBAAC,IAAD,SCsBDC,MA/Bf,WAAgB,IAAD,EACYlC,mBAAS,IADrB,mBACNmC,EADM,KACAC,EADA,KAOLJ,EAAY,SAACC,GACjBG,GAAS,SAACC,GACR,OAAOA,EAAUC,QAAO,SAACC,EAASC,GAChC,OAAOA,IAAUP,SAKzB,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYU,QAhBA,SAACgB,GACfL,GAAS,SAACC,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAqBI,UAepBN,EAAMO,KAAI,SAACrC,EAAKmC,GACf,OACA,kBAAC,EAAD,CAAMP,GAAIO,EAAOrC,MAAOE,EAAKF,MAAOC,QAASC,EAAKD,QAAS4B,WAAYA,OAMzE,kBAAC,EAAD,QCtBcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.8c84c930.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport './CreateNote.css';\r\n\r\nexport const CreateNote = (props) => {\r\n    const [isExpanded,setIsExpanded] = useState(false);\r\n\r\n    const [note,setNote] = useState({\r\n        title:\"\",\r\n        content:\"\"\r\n    });\r\n    const expand = () =>{\r\n        setIsExpanded(true);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        const { name,value } = event.target;\r\n        setNote((prevNote) => {\r\n            return {\r\n                ...prevNote,\r\n                [name]: value\r\n        };\r\n        });\r\n    };\r\n    console.log(note);\r\n\r\n    const submitNote =(event)=>{\r\n        event.preventDefault();\r\n        props.addNote(note);\r\n        setNote({\r\n            title:\"\",\r\n            content:\"\"\r\n        })\r\n        setIsExpanded(false);\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <form className=\"create-note\">\r\n                {isExpanded &&\r\n                <input name=\"title\" placeholder=\"Title\" type=\"text\" onChange={handleChange}\r\n                value={note.title}/> }\r\n                <textarea name=\"content\" placeholder=\"take a note...\" onClick={expand} onChange={handleChange}\r\n                rows={isExpanded ? 3 : 1} value={note.content}/>\r\n                <Zoom in={isExpanded}>\r\n                    <Fab onClick={submitNote}>\r\n                        <AddIcon/>\r\n                    </Fab>\r\n                </Zoom>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateNote;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nexport const Footer = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    return (\r\n        <footer>\r\n            <p>copyright &copy; {year}</p>\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer;\r\n","import React from 'react';\r\nimport LocalActivityIcon from '@material-ui/icons/LocalActivity';\r\nimport './Header.css';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>\r\n                <LocalActivityIcon />\r\n                 Sticky Note\r\n            </h1>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Note.css';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nconst Note = (props) => {\r\n\r\n    const handleClick = ()=>{\r\n        props.deleteNote(props.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <h1>{props.title}</h1>\r\n            <p>{props.content}</p>\r\n            <button onClick={handleClick}>\r\n                <DeleteForeverIcon/>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\nexport default Note;","import React,{useState} from 'react';\nimport './App.css';\nimport CreateNote from './components/CreateNote/CreateNote';\nimport Footer from './components/Footer/Footer';\nimport Header from './components/Header/Header';\nimport Note from './components/Note/Note';\n\nfunction App() {\n  const [notes,setNotes] = useState([]);\n  const addNote = (newNote) => {\n    setNotes((prevNotes) => {\n      return [...prevNotes,newNote]\n    })\n  }\n    const deleteNote =(id)=>{\n      setNotes((prevNotes)=>{\n        return prevNotes.filter((noteItem,index)=>{\n          return index !== id\n        })\n      })\n\n    }\n  return (\n    <div className=\"App\">\n      <Header/>\n      <CreateNote addNote={addNote}/>\n      {notes.map((note,index)=>{\n        return(\n        <Note id={index} title={note.title} content={note.content} deleteNote={deleteNote} />\n        )\n      \n      })}\n      \n     \n      <Footer/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}